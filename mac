#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

echo "
__________                   .__
\______   \ _______  __ ____ |  |_______ ___.__.
 |       _// __ \  \/ // __ \|  |\_  __ <   |  |
 |    |   \  ___/\   /\  ___/|  |_|  | \/\___  |
 |____|_  /\___  >\_/  \___  >____/__|   / ____|
        \/     \/          \/            \/
"

arch=$(uname -m)
if [ "$arch" == "arm64" ]; then
  HOMEBREW_PREFIX=/opt/homebrew

  /usr/sbin/softwareupdate --install-rosetta --agree-to-license
else
  HOMEBREW_PREFIX=/usr/local
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc "export PATH=\"$HOMEBREW_PREFIX/bin:$PATH\"" 1
    append_to_zshrc "source $(brew --prefix asdf)/asdf.sh" 1

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
cask_args appdir: '/Applications'

tap 'homebrew/cask'
tap 'homebrew/bundle'
tap 'heroku/brew'

brew 'asdf'
brew 'bash'
brew 'bat'
brew 'coreutils'
brew 'curl'
brew 'dockutil'
brew 'elixir'
brew 'openjdk'
brew 'fd'
brew 'fzf'
brew 'git'
brew 'gnu-sed'
brew 'gnupg'
brew 'heroku'
brew 'htop'
brew 'hub'
brew 'hyperfine'
brew 'jq'
brew 'less'
brew 'ncdu'
brew 'nmap'
brew 'parallel'
brew 'pspg'
brew 'pv'
brew 'ripgrep'
brew 'rsync'
brew 'tmux'
brew 'vim'
brew 'wget'
brew 'zsh'
brew 'zsh-autosuggestions'
brew 'zsh-history-substring-search'
brew 'zsh-syntax-highlighting'
EOF

add_or_update_asdf_plugin() {
  local name="$1"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name"
  else
    asdf plugin-update "$name"
  fi
}

source $(brew --prefix asdf)/asdf.sh

add_or_update_asdf_plugin "erlang"
add_or_update_asdf_plugin "elixir"
add_or_update_asdf_plugin "ruby"
add_or_update_asdf_plugin "nodejs"
add_or_update_asdf_plugin "dotnet-core"

bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"

if [ "$arch" == "arm64" ] && ! command -v docker >/dev/null; then
  wget -O /tmp/Docker.dmg https://desktop.docker.com/mac/stable/arm64/62632/Docker.dmg
  sudo hdiutil attach /tmp/Docker.dmg
  rsync -a /Volumes/Docker/Docker.app /Applications/
fi

# Install casks after everything else because if an app exists it will throw
# an error and exit the script
brew bundle --file=- <<EOF
cask '1password'
cask 'alfred'
cask 'dash'
cask 'firefox'
cask 'google-chrome'
cask 'iterm2'
cask 'keybase'
cask 'ngrok'
cask 'postgres'
cask 'slack'
cask 'visual-studio-code'
cask 'vlc'
cask 'zoom'
EOF

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
